version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ia_solaris_postgres
    environment:
      POSTGRES_DB: ia_solaris
      POSTGRES_USER: ia_solaris_user
      POSTGRES_PASSWORD: ia_solaris_password_2025
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ia_solaris_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ia_solaris_user -d ia_solaris"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache e sess√µes
  redis:
    image: redis:7-alpine
    container_name: ia_solaris_redis
    command: redis-server --appendonly yes --requirepass ia_solaris_redis_2025
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - ia_solaris_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LiteLLM Proxy
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    container_name: ia_solaris_litellm
    environment:
      LITELLM_MASTER_KEY: sk-ia-solaris-litellm-2025
      LITELLM_SALT_KEY: sk-salt-ia-solaris-2025
      DATABASE_URL: postgresql://ia_solaris_user:ia_solaris_password_2025@postgres:5432/ia_solaris
      REDIS_URL: redis://:ia_solaris_redis_2025@redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
    volumes:
      - ./litellm-config.yaml:/app/config.yaml
    ports:
      - "4000:4000"
    command: ["--config", "/app/config.yaml", "--port", "4000", "--num_workers", "1"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ia_solaris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Proxy Inteligente IA SOLARIS
  proxy-ia-solaris:
    build:
      context: ../proxy-inteligente/proxy-ia-solaris
      dockerfile: Dockerfile
    container_name: ia_solaris_proxy
    environment:
      DATABASE_URL: postgresql://ia_solaris_user:ia_solaris_password_2025@postgres:5432/ia_solaris
      REDIS_URL: redis://:ia_solaris_redis_2025@redis:6379
      LITELLM_BASE_URL: http://litellm:4000
      LITELLM_API_KEY: sk-ia-solaris-litellm-2025
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SECRET_KEY: ia-solaris-mvp-secret-key-2025
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@iasolaris.com.br}
      CREDITS_EMAIL: ${CREDITS_EMAIL:-creditos@iasolaris.com.br}
      DEBUG: ${DEBUG:-false}
      EMAIL_DEBUG: ${EMAIL_DEBUG:-true}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      litellm:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ia_solaris_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard Administrativo
  admin-dashboard:
    build:
      context: ../admin-dashboard/admin-ia-solaris
      dockerfile: Dockerfile
    container_name: ia_solaris_admin
    environment:
      VITE_API_BASE: http://localhost:5000/v1
    ports:
      - "3000:3000"
    depends_on:
      - proxy-ia-solaris
    restart: unless-stopped
    networks:
      - ia_solaris_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ia_solaris_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - proxy-ia-solaris
      - admin-dashboard
    restart: unless-stopped
    networks:
      - ia_solaris_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ia_solaris_network:
    driver: bridge

